#################################################
##
## 	.aliases
##
##	include in .bashrc/.zshrc by
##
##	if [ -f ~/.aliases ]; then
##	    . ~/.aliases
##	fi
##
##################################################

## COLOR by \033[COL_IDm  TEXT \033[0m
#Black       0;30     Dark Gray     1;30
#Blue        0;34     Light Blue    1;34
#Green       0;32     Light Green   1;32
#Cyan        0;36     Light Cyan    1;36
#Red         0;31     Light Red     1;31
#Purple      0;35     Light Purple  1;35
#Brown       0;33     Yellow        1;33
#Light Gray  0;37     White         1;37

##################### My aliases  ######################
#
connect_remote_notebook(){
  ssh -N -f -L localhost:8889:127.0.0.1:8889 $1
}

	# General
alias lock='/usr/bin/i3lock -c 000000'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias xkb='setxkbmap -option "ctrl:nocaps"'
alias fn='find -name'
alias tarf='tar -xvf'
alias resetX="export DISPLAY=:0.0"
alias rubber="rubber -m pdftex"
alias vpn='sudo vpnc --local-port 0'
2png () {
  convert -density 300 $1 -resize 1024x1024 $1.png
}
svg2png () {
  inkscape -z -d 300 -e $(basename $1 .svg).png $1
}
aur () {
  git clone https://aur.archlinux.org/$1
}
alias paclst='pacman -Qqettn'
alias aurlst='pacman -Qqettm'
alias piplst="pip list --not-required | tail -n +3 | awk '{print \$1;}'"

	# ssh
alias ssh="TERM=xterm ssh"
alias sshx="TERM=xterm ssh -Y"
alias sshnokey="ssh -X -o PubkeyAuthentication=no"

	# vim
	# https://github.com/Sarcasm/compdb <- Add header files to compile_commands.json
alias vimsrc="compdb -p build/ list > compile_commands.json &> /dev/null; vim **/*.cpp(N) **/*.hpp(N) **/*.hxx(N)" # **/*.c(N) **/*.h(N)
alias vimtex='vim --servername $(basename *.tex.latexmain .tex.latexmain) *.tex content/*.tex(N) settings/*.tex(N)'

	# apt
alias apts="apt-cache search"
alias apti="sudo apt-get install"
alias aptr="sudo apt-get remove"

	# tmux
#alias tmux="history -w;tmux"  # write history file when opening tmux, fix vim colors in tmux,
alias tmux-share="tmux -S /var/tmux/pair_sock new -s shared"
alias tls='tmux list-sessions'
alias tat='tmux attach-session -t'
alias tkill='tmux kill-session -t'
tmuxdev () {
  tmux new-session -d -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n Coding -c $HOME
  tmux neww -n System -c $HOME
  tmux neww -n System -c $HOME
  tmux neww -n Latex -c ~/Dropbox/Latex
  tmux neww -n Latex -c ~/Dropbox/Latex
  tmux selectw -t 1
  tmux attach
}


        # Develop
alias cmake="cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
alias make="make -j 8"
alias ctest="ctest -j 8"
alias pip_upgrade="pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U"
# Clang ignores LIBRARY_PATH
alias activate='source ~/opt/python/bin/activate'
alias ctags='ctags -R --options=$HOME/.ctagsrc'
alias valmem='valgrind --leak-check=full --max-stackframe=4000000'
alias cmdbg='cmake -DCMAKE_BUILD_TYPE=Debug'
print_code_CPP='enscript -G -f Courier7  --color -Ecpp -L 90 -C '
print_code_PY='enscript -G -f Courier7  --color -Epython -L 90 -C '
prof() {
  #CURRENT_DIR=$PWD; mkdir -p prof; cd prof;
  rm -f $1.prof* &> /dev/null
  LD_PRELOAD=$HOME/opt/gperftools/lib/libprofiler.so CPUPROFILE=$1.prof $@
  #cd $CURRENT_DIR
}
pprint() {
  # First argument should be the binary, e.g. executable or python module!
  # Second argument is name of profile file
  pprof --text --lines $1 $2.prof > $2.prof.txt
  head -n 20 $2.prof.txt
  pprof --svg --lines $1 $2.prof > $2.prof.lines.svg
  pprof --svg $1 $2.prof > $2.prof.svg
  pprof --collapsed $1 $2.prof | flamegraph.pl - > $2.prof.flamegraph.svg
  #pprof --web --lines $1 $1.prof
}
hprof() {
  #CURRENT_DIR=$PWD; mkdir -p hprof; cd hprof;
  rm -f $1.hprof* &> /dev/null
  LD_PRELOAD=$HOME/opt/gperftools/lib/libtcmalloc.so HEAPPROFILE=$1.hprof $@
  #cd $CURRENT_DIR
}
hpprint() {
  if [ "$#" -eq 2 ]; then
    for f in $(ls $2.hprof.*.heap); do
      pprof --text --lines $1 $f > ${f%.*}.txt
      head -n 4 ${f%.*}.txt
      pprof --svg --lines $1 $f > ${f%.*}.svg
      #pprof --pdf --lines $1 $f > ${f%.*}.pdf
      #pprof --web --lines $1 $f
    done
  elif [ "$#" -eq 3 ]; then
    f=$(ls -1 $2.hprof.*$3.heap | head -n 1)
    pprof --text --lines $1 $f > ${f%.*}.txt
    head -n 5 ${f%.*}.txt
    pprof --svg --lines $1 $f > ${f%.*}.svg
    #pprof --pdf --lines $1 $f > ${f%.*}.pdf
    #pprof --web --lines $1 $f
  fi
}

hpprint_full() {
  if [ "$#" -eq 1 ]; then
    for f in $1; do
      pprof --text --lines $1 $f > ${f%.*}.txt
      head -n 4 ${f%.*}.txt
      pprof --svg --lines $1 $f > ${f%.*}.svg
      chromium-browser ${f%.*}.svg &
      #pprof --pdf --lines $1 $f > ${f%.*}.pdf
      #pprof --web --lines $1 $f
    done
  fi
}
