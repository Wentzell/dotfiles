" Add this to .vim/plugin
" and each time a file xxx.mako.hpp or xxx.mako.cpp is saved
" the corresponding file xxx.hxx or xxx.cxx is generated (i.e. the mako is
" processed) and clang-formatted 
" One can forget to regenerate any more ...
"
" This suppose that you have set clang_format#command, e.g. (to use
" clang-format plugin) : 
" let g:clang_format#command = '/opt/llvm/bin/clang-format'

function! RunMako()

 python << EOF
from mako.template import Template
import vim, re, os

clang_format = vim.eval("g:clang_format#command")

code = '\n'.join(vim.current.buffer[:])

# remove the comment //mako ,  /*mako .... */
code = re.sub(r'//\s*mako\s*','', code)
code = re.sub(r'/\*\s*mako(.*?)\*/', r'\1', code, flags= re.DOTALL) 

# replace MAKO_ABC by ${ABC} : NB no _
code = re.sub(r'MAKO_([a-zA-Z0-9]+)', r'${\1}', code)

# call mako engine
code = Template(code).render()

# Adding the warning on top of the file
sep = '//' + 40*'*'
code = '\n'.join([sep, '// GENERATED BY MAKO : DO NOT EDIT', sep, code])

# clang formatting the code. clang format must be in the path !
#p = subprocess.Popen(['/opt/llvm/bin/clang-format'], stdin = subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
#code2 = p.communicate(code)[0]
#code = code2 if code2 else code

fo = vim.current.buffer.name.replace(".mako",'').replace('.hpp','.hxx').replace('.cpp','.cxx')
open(fo,'w').write(code)

os.system('/bin/bash -c "%s -i %s"'%(clang_format,fo)) 

EOF

endfunction

:au BufWritePost *.mako.?pp call RunMako()

