#!/usr/bin/env python

# This file will update or generate the copyright header of a given source file
# based on the history provided by the 'git blame -w -M --incremental' command
#
# Usage: gen_copyright file1 [file2 ...] [--appname AppName]
#
# Caution: This will edit the file!

from subprocess import *
from sys import *
from datetime import *
import re

import argparse
parser = argparse.ArgumentParser(description="""
A script to generate GPL Copyright headers for a list of files based on their git history
""")
parser.add_argument('-appname', nargs=None, default='TRIQS', help="The Name of the Project")
parser.add_argument('-description', nargs=None, default="A Toolbox for Research in Interacting Quantum Systems", help="The Description of the Project")
args, additional_args = parser.parse_known_args()

def pretty_years(s):

    l = list(s)
    l.sort()

    start = None
    prev = None
    r = []

    for x in l:
        if prev is None:
            start = x
            prev = x
            continue

        if x == prev + 1:
            prev = x
            continue

        if prev == start:
            r.append("%i" % prev)
        else:
            r.append("%i-%i" % (start, prev))

        start = x
        prev = x

    if not prev is None:
        if prev == start:
            r.append("%i" % prev)
        else:
            r.append("%i-%i" % (start, prev))

    return ", ".join(r)


def order_by_year(a, b):

    la = list(a[2])
    la.sort()

    lb = list(b[2])
    lb.sort()

    if la[0] < lb[0]:
        return -1
    elif la[0] > lb[0]:
        return 1
    else:
        return 0


for f in additional_args:

    print "Generating header for file: %s"%f

    commits = []
    data = {}

    for ln in Popen(["git", "blame", "-w", "-M", "--incremental", f],
                    stdout=PIPE).stdout:

        if ln.startswith("filename "):
            if len(data) > 0:
                commits.append(data)
            data = {}

        elif ln.startswith("author "):
            data["author"] = ln[7:].strip()

        elif ln.startswith("author-mail <"):
            data["author-mail"] = ln[12:].strip()

        elif ln.startswith("author-time "):
            data["author-time"] = ln[11:].strip()

        elif ln.startswith("author-tz "):
            data["author-tz"] = ln[9:].strip()

    by_author = {}
    for c in commits:
        try:
            n = by_author[c["author"]]
        except KeyError:
            n = (c["author"], c["author-mail"], set())
            by_author[c["author"]] = n

        # FIXME: Handle time zones properly
        year = datetime.fromtimestamp(int(c["author-time"])).year

        n[2].add(year)
    by_author.pop("Not Committed Yet", None)

    for an, a in list(by_author.iteritems()):
        for bn, b in list(by_author.iteritems()):
            if a is b:
                continue

            if a[1] == b[1]:
                a[2].update(b[2])

                if by_author.has_key(an) and by_author.has_key(bn):
                    del by_author[bn]

    copyright = list(by_author.itervalues())
    copyright.sort(order_by_year)

    # For 2018 we add a copyright note for The Simons foundation with an author list
    simons_authors = set()
    header = """/*******************************************************************************
 *
 * %s: %s
 *
"""%(args.appname, args.description)
    for name, mail, years in copyright:
        years_gt_2017 = [y for y in years if int(y) > 2017]
        years_lt_2018 = [y for y in years if int(y) < 2018]
        if len(years_gt_2017) > 0: simons_authors.add(name)
        if len(years_lt_2018) > 0:
            header = header + " * Copyright (c) %s %s\n" % (
                pretty_years(years_lt_2018), name)
    if len(simons_authors) > 0:
        header = header + " * Copyright (c) %s The Simons foundation\n *   authors: %s" % (
            pretty_years(years), ", ".join(list(simons_authors)))
    header = header + """
 *
 * %s is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * %s is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * %s. If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/
"""%(args.appname, args.appname, args.appname)
    if f.endswith('.py'): header = re.sub(r"/? ?\*/*", "#", header)
    with open(f, "r") as fin: dat = fin.read()
    expr = r"^#{10}.*#{10}\n" if f.endswith('.py') else r"^/\*{10}.*\*{10}/\n"
    if re.search(expr, dat, re.S):
        dat = re.sub(expr, header, dat, 1, re.S)
    else:
        dat = header + dat
    with open(f, "w") as fout: fout.write(dat)
